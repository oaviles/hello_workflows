using System;
using System.Text;

using Org.BouncyCastle.Crypto;
using Org.BouncyCastle.Crypto.Engines;
using Org.BouncyCastle.Crypto.Parameters;
using Org.BouncyCastle.Security;
using Org.BouncyCastle.Crypto.Paddings;
using Org.BouncyCastle.Utilities;
using Org.BouncyCastle.Utilities.Encoders;
using Org.BouncyCastle.Crypto.Utilities;
using Org.BouncyCastle.Crypto.Modes;
using Org.BouncyCastle.Utilities.IO;
using Org.BouncyCastle.Crypto.Prng;
using Org.BouncyCastle.Crypto.Prng.Drbg;
using Org.BouncyCastle.Crypto.Macs;
using Org.BouncyCastle.Crypto.Digests;

public class RandomNumberExamples
{
 
    public static void Main(String[] args)
    {
        
        MyConsole.quiet = false;
        Console.WriteLine();
        Console.WriteLine();
        Console.WriteLine("=================================");
        Console.WriteLine("Start Random Number Examples.Main");
        Console.WriteLine("=================================");

        { 
            byte[] bytes = exampleDefaultCSharpRandom();
            Console.WriteLine(string.Format("C# DEFAULT random\tbytes:[{0}]\tLength:[{1}]",
                string.Join(",",bytes),bytes.Length.ToString()));        
        }
        
        {
            byte[] bytes = exampleDefaultSecureRandom();
            Console.WriteLine(string.Format("BC API DEFAULT random\tbytes:[{0}]\tLength:[{1}]",
                string.Join(",",bytes),bytes.Length.ToString()));        
            bytes = exampleDefaultSecureRandom();
            Console.WriteLine(string.Format("BC API DEFAULT random\tbytes:[{0}]\tLength:[{1}]",
                string.Join(",",bytes),bytes.Length.ToString()));        
        }

        {
            byte[] bytes = exampleHMACSecureRandom(new Sha256Digest(), ExValues.sampleNonce);
            Console.WriteLine(string.Format("BC API HMAC random\tbytes:[{0}]\tLength:[{1}]",
                string.Join(",",bytes),bytes.Length.ToString()));        
        }
        
        Console.WriteLine("=================================");
        Console.WriteLine("End   Random Number Examples.Main");
        Console.WriteLine("=================================");
        Console.WriteLine();
        Console.WriteLine();        
    }

    public static byte[] exampleDefaultCSharpRandom()
    {
        ExValues.fixedRandomSeed = 151;
        ExValues.fixedRandom = new Random(ExValues.fixedRandomSeed);
        byte[] bytes = new byte[32];
        ExValues.fixedRandom.NextBytes(bytes);
        return bytes;
    }    
    
    /*
    public static void testDefaultCSharpRandom()
    {
        byte[] bytes = new byte[32];
        ExValues.fixedRandom.NextBytes(bytes);
        Console.WriteLine(string.Format("C# 32 random\tbytes:[{0}]\tLength:[{1}]",
            string.Join(",",bytes),bytes.Length.ToString()));
    }
    */
    
    public static byte[] exampleDefaultSecureRandom()
    {
        SecureRandom defaultSecureRandom = new SecureRandom();
        byte[] bytes = new byte[32];
        defaultSecureRandom.NextBytes(bytes);
        return bytes;
    }
    
    public static byte[] exampleHMACSecureRandom(IDigest digestToUse, byte[] nonce)
    {        
        SP800SecureRandomBuilder hMacSecureRandomBuilder = new SP800SecureRandomBuilder(ExValues.cSharpFixedRandom, false);
        hMacSecureRandomBuilder.SetPersonalizationString(ExValues.personalizationString);
        // hMacSecureRandomBuilder.SetSecurityStrength(256); default is 256 bits
        // hMacSecureRandomBuilder.SetEntropyBitsRequired(256); default is 256 bits

        HMac hmacDigest = new HMac(digestToUse);
        SecureRandom hmacSecureRandom = hMacSecureRandomBuilder.BuildHMac(hmacDigest, nonce, false);
        byte[] bytes = new byte[32];
        hmacSecureRandom.NextBytes(bytes);
        return bytes;
    }
    

//SecureRandom random = new SP800SecureRandomBuilder().BuildHMac(new HMac(new Sha256Digest()), new byte[32], false);
    //public static byte[] FixedRandomecbUnpaddedEncrypt(IBlockCipher cipher, 

}